---
- name: Include OS-specific variables
  include_vars: "{{ ansible_facts['os_family'] }}.yml"
- name: Install required system packages
  package:
    state: present
    name: "{{ docker_deps }}"
- name: Install Docker (Ubuntu)
  when: ansible_facts['distribution'] == 'Ubuntu'
  block:
  - name: Add Docker GPG apt Key
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add Docker Repository
    apt_repository:
      repo: "deb https://download.docker.com/linux/ubuntu focal stable"
      state: present

  - name: Update apt and install docker-ce
    apt:
      update_cache: yes
      name: "{{ docker_packages }}"
      state: present

  - name: Switch to iptables-legacy
    alternatives:
      name: iptables
      path: /usr/sbin/iptables-legacy

  - name: Switch to ip6tables-legacy
    alternatives:
      name: ip6tables
      path: /usr/sbin/ip6tables-legacy

  - name: Switch to pip3
    alternatives:
      name: pip
      link: /usr/bin/pip
      path: /usr/bin/pip3

  - name: Switch to python3
    alternatives:
      name: python
      link: /usr/bin/python
      path: /usr/bin/python3

  - name: Install Docker Module for Python
    pip:
      name: docker

- name: Ensure group docker exists
  group:
    name: docker
    state: present

- name: Add user "{{ username }}" to group docker
  user:
    name: '{{ username }}'
    groups:
      - docker
    append: yes

- name: Make sure Docker is running and enabled
  service:
    name: docker
    state: started
    enabled: yes

- name: Get a list of containers
  delegate_to: localhost
  become: no
  find:
    paths:
      - "roles/containers/media"
      - "roles/containers/homeautomation"
      - "roles/containers/services"
      - "roles/containers/system"
    file_type: directory
    recurse: no
  register: containers

- name: Stop and remove all the disabled containers
  become: no
  docker_container:
    name: "{{ item.path.split('/')[-1] }}"
    state: absent
  when: not lookup('vars', 'enable_' + item.path.split('/')[-1])
  with_items: "{{ containers.files }}"

- name: Handle persistent data
  become: no
  when: "enable_nas_stuff | default(False)"
  block:
  - name: Check if the persistent data folder exists on the remote machine
    stat:
      path: "{{ docker_dir }}"
    register: persistent_data
    when: "enable_nas_stuff | default(False)"

  - name: Check if the persistent data folder is empty
    find:
      paths:
        - "{{ docker_dir }}/"
      recurse: yes
    register: persistent_data_find
    when: "enable_nas_stuff | default(False)"

  - name: Create the persistent data folder on the remote machine
    file:
      dest: "{{ docker_dir }}"
      state: directory
      owner: "{{ username }}"
      group: "{{ username }}"
      mode: 0755
      recurse: yes
    when: not persistent_data.stat.exists

  - name: Chmod the data folder
    become: yes
    file:
      dest: "{{ docker_dir }}"
      state: directory
      owner: "{{ username }}"
      group: "{{ username }}"
      recurse: yes
